{
    "bienvenida": [
        "Soy tu Asistente Virtual. Fui creada para instruirte todo respecto al hermoso mundo de la programacion."
    ],
    "definicion": [
        "La programación es el proceso de crear un conjunto detallado de instrucciones y algoritmos que guían a una computadora para realizar acciones específicas y solucionar problemas. Es decir, le indicamos a la máquina cómo ejecutar pasos en un orden determinado para lograr un objetivo."
    ],
    "importancia": [
        "En la era digital actual, aprender las bases de la programación es absolutamente esencial por varias razones importantes:"
    ],
    "razones": [
        "Nos permite automatizar tareas manuales repetitivas y propensas a errores humanos, optimizando tiempo y recursos.",
        "Nos capacita para resolver problemas complejos de todo tipo, desde calcular trayectorias de cohetes hasta predecir el clima.",
        "Nos habilita a desarrollar aplicaciones web y móviles innovadoras que mejoren la vida de millones de personas.",
        "Nos da el poder de crear videojuegos, animaciones, efectos visuales y experiencias interactivas gracias a la programación gráfica.",
        "Nos ayuda a proteger información confidencial y mejorar la seguridad informática en general.",
        "Nos permite recolectar y analizar grandes volúmenes de datos para obtener ideas valiosas y predecir tendencias.",
        "En resumen, dominar conceptos de programación en la era digital es tan importante como saber leer y escribir."
    ],
    "variables": "Las variables son contenedores que almacenan datos que pueden modificarse durante la ejecución de un programa. Se definen con un nombre descriptivo y un tipo de datos asociado como texto, número, booleano, etc. Sirven para guardar valores que se utilizarán en distintas partes del código.",
    "constantes": "Las constantes también almacenan valores, pero que mantienen un valor fijo que no cambia. Se suelen definir con nombres en mayúsculas por convención. Algunos ejemplos son PI=3.14 o GRUPO_EDAD=20-35. Sirven para representar valores fijos que no variarán.",
    "tipos_de_datos": "Los tipos de datos definen el tipo de valor que puede almacenar una variable o constante. Los tipos primarios más comunes en todos los lenguajes son: Números enteros y decimales para operaciones matemáticas, Cadenas de texto para alfanuméricos, Booleanos para verdadero/falso, Arrays y objetos para estructuras complejas.",
    "operadores": "Los operadores permiten realizar acciones sobre variables y valores, como asignación (=), matemáticos (+, -, *, /), comparación (>, <, ==), lógicos (and, or, not) entre muchos otros. Permiten construir expresiones complejas.",
    "estructuras_condicionales": "Las estructuras condicionales permiten bifurcación en el programa dependiendo de si una expresión lógica es cierta o falsa. Los principales son el if y else para ejecutar código si se cumple o no una condición. También switch (comparación) y try/catch para manejo de errores.",
    "bucles": "Los bucles permiten ejecutar repetidamente un bloque de código mientras se cumpla una condición. Los principales son for, mientras se cumpla un contador, y while, mientras se cumpla una expresión lógica. Se utilizan para iteraciones, leer arrays, lectura de archivos, iteraciones infinitas y más.",
    "funciones": "Bloques de código identificados con un nombre que se pueden reutilizar fácilmente.",
    "compiladores": "traducen lenguajes al código máquina entendible por los computadores.",
    "depuración": "técnicas para identificar errores, bugs y fallos lógicos en el código.",
    "algoritmos": "automatizan y resuelven problemas complejos de manera genérica y escalable.",
    "estructuras_de_datos": {
        "definicion": "Las estructuras de datos son formas específicas de organizar y almacenar datos en la memoria de un programa para acceder y modificar los elementos de manera eficiente.",
        "arreglos": {
            "descripcion": "Los arreglos o arrays son estructuras indexadas que permiten acceder a sus elementos mediante índices numéricos, comenzando generalmente desde cero. Permiten almacenar y recorrer colecciones de elementos del mismo tipo.",
            "ventajas": "Acceso rápido a elementos específicos. Uso sencillo. Contigüidad en memoria. Muchas funciones integradas.",
            "desventajas": "Tamaño fijo en algunos lenguajes. Costoso redimensionar. Ineficiente para inserciones/eliminaciones."
        },

        "listas_enlazadas": {
            "descripcion": "Las listas vinculadas almacenan secuencias de elementos no contiguos en memoria. Cada elemento tiene un puntero al siguiente, formando una cadena de nodos.",
            "ventajas": "Tamaño dinamico. Facil de expandir. Insercion y eliminacion eficiente al principio.",
            "desventajas": "Acceso secuencial. Mayor uso de memoria por los punteros. Recorrer todos los elementos es lento."
        },
        "pilas": {
            "descripcion": "Estructura LIFO que permite almacenar y acceder a elementos de forma ordenada, el último que entra sale primero como una pila de platos.",
            "ventajas": [
                "Implementación sencilla",
                "Rápido acceso al último elemento insertado", 
                "Útil para deshacer/rehacer cambios"
            ],
            "desventajas": [
               "Solo se puede acceder al último elemento insertado",
               "No es posible acceder a elementos arbitrarios o al principio de la pila"  
            ]
        },
      
        "colas": {
           "descripcion": "Estructura FIFO que permite almacenar y acceder a elementos de forma ordenada, el primero que entra sale primero como una cola de personas.",
           "ventajas": [
              "Sigue un orden estricto de llegada",
              "Permite modelar situaciones reales como colas de impresión, tareas", 
              "Fácil de implementar"
           ],
           "desventajas": [
              "No se puede acceder a elementos arbitriarios sino hasta el principio de la cola",
              "Requiere más memoria al tener que mantener referencia al principio y final"
           ]
        },  
        "hash": {
            "descripcion": "Estructura clave-valor que permite almacenar y acceder a pares mediante una funcion hash sobre la clave para calcular indices.",
            "ventajas": "Rendimiento en busqueda, insercion y eliminacion constantes.",
            "desventajas": "Colisiones entre claves mapeadas al mismo indice. Mas uso de memoria."
        }
    },
    
    "POO": {
        "definicion": "Paradigma de programación basado en objetos que emulan entidades reales con propiedades y métodos.",
        "elementos": [
            "Clases: Plantillas para crear objetos.",
            "Objetos: Instancias de clases con propiedades y métodos específicos.",
            "Herencia: Capacidad de una clase para heredar propiedades y métodos de otra.",
            "Polimorfismo: Posibilidad de un objeto para comportarse de múltiples maneras."
        ],
        "clases": {
            "definicion": "Plantillas para crear objetos.",
            "ejemplo": "class Vehiculo { /* Definición de la clase */ }"
        },
        "objetos": {
            "definicion": "Instancias de clases con propiedades y métodos específicos.",
            "ejemplo": "Vehiculo miAuto = new Vehiculo();"
        },
        "herencia": {
            "definicion": "Capacidad de una clase para heredar propiedades y métodos de otra.",
            "ejemplo": "class Coche extends Vehiculo { /* Coche hereda de la clase Vehiculo */ }"
        },
        "polimorfismo": {
            "definicion": "Posibilidad de un objeto para comportarse de múltiples maneras.",
            "ejemplo": "void mostrarInformacion(Vehiculo vehiculo) { /* Código polimórfico */ }"
        },
        "encapsulamiento": {
            "definicion": "Ocultar detalles internos de una clase y exponer solo lo necesario.",
            "ejemplo": "private String contraseña; /* Ejemplo de variable encapsulada */"
        }
    },


    "PE_1": [

        "Según la información presentada, ¿cuál es el objetivo principal de la programación?",
            
        "a) Automatizar tareas y resolver problemas mediante algoritmos",
        "b) Crear aplicaciones móviles innovadoras",  
        "c) Mejorar la interfaz de usuario de sitios web"

    ],
    "P1_RESPUESTA": "a",
    "P1_JUSTIFICACION": "El objetivo principal de la programación es automatizar tareas y resolver problemas a través de algoritmos, no solo crear aplicaciones innovadoras o mejorar interfaces.",
    
    "PE_2": [
        "¿Qué paradigma de programación permite representar entidades del mundo real?",
        "a) Programación funcional",
        "b) Programación orientada a objetos",
        "c) Programación estructurada " 
    ],
    "P2_ RESPUESTA": "b",
    "P2_JUSTIFICACION": "La programación orientada a objetos modela entidades del mundo real como objetos con propiedades y métodos.",
    
    "PE_3": [
        "¿Cuál de las siguientes NO es una estructura de datos válida?",
        "a) Árbol",
        "b) Cola",
        "c) Montón",
        "d) Arreglo"
    ],
    "P3_RESPUESTA": "c", 
    "P3_JUSTIFICACION": "Montón no es una estructura de datos en programación, las demás sí lo son.",

    "PE_4": [
        "¿Para que sirven las variables en programacion?",
        "a) Para almacenar datos que no cambian",
        "b) Para realizar operaciones matematicas",
        "c) Para almacenar datos que pueden modificarse durante la ejecucion de un programa"
    ],

    "P4_RESPUESTA": "c",
    "P4_JUSTIFICACION": "Las variables almacenan datos que pueden cambiar durante la ejecución.",
    
    "PE_5": [
        "¿Cual es la diferencia entre variables y constantes?",
        "a) Ninguna, son lo mismo",
        "b) Las variables mantienen un valor fijo", 
        "c) Las constantes mantienen un valor fijo que no cambia"
    ],

    "P5_RESPUESTA": "c",
    "P5_JUSTIFICACION": "Las constantes mantienen un valor fijo, las variables pueden modificarse.",
    
    "PE_6": [
        "Menciona dos ejemplos de estructuras de datos",
        "a) Colas y pilas",
        "b) Arreglos y listas enlazadas",
        "c) Arreglos y arboles",
        "d) Matrices y grafos"
    ],

    "P6_RESPUESTA": "a",
    "P6_JUSTIFICACION": "Colas y pilas son estructuras de datos válidas.",
    
    "PE_7": [
        "¿Que es la programacion orientada a objetos?",
        "a) Paradigma de programacion basado en modulos funcionales",
        "b) Paradigma de programacion basado en algoritmos",
        "c) Paradigma de programacion basado en objetos que emulan entidades reales con propiedades y metodos"
    ],

    "P7_RESPUESTA": "c",
    "P7_JUSTIFICACION": "La POO modela entidades del mundo real como objetos con propiedades y métodos.",
    
    "PE_8": [
        "Explica un uso tipico de una pila como estructura de datos",
        "a) Administracion de memoria dinamica",
        "b) Rehacer/deshacer en editores de texto",
        "c) Almacenamiento temporal de datos",
        "d) Comunicacion entre programas"
    ],

    "P8_RESPUESTA": "b",
    "P8_JUSTIFICACION": "Las pilas se usan en editores de texto para rehacer/deshacer cambios.",
    
    "PE_9": [
        "¿Para que sirven las estructuras condicionales en programacion?",
        "a) Para generar numeros aleatorios",
        "b) Para bifurcar el flujo del programa dependiendo de si una condicion es cierta o falsa",
        "c) Para almacenar datos temporalmente",
        "d) Para facilitar operaciones matematicas"
    ],

    "P9_RESPUESTA": "b",
    "P9_JUSTIFICACION": "Las condicionales bifurcan el flujo si se cumple una condición.",
    
    "PE_10": [
        "Menciona un caso de uso tipico para una cola como estructura de datos",
        "a) Evaluador de expresiones matematicas",
        "b) Autocompletado de palabras en un editor",
        "c) Gestion de procesos e hilos en un sistema operativo",
        "d) Animaciones en videojuegos"
    ],

    "P10_RESPUESTA": "c",
    "P10_JUSTIFICACION": "Las colas se usan en SO para gestionar procesos o hilos.",

    "ahorcado": {
        "p1":{
            "palabra":"herencia",
            "pistas":{
                "p1":"Mecanismo por el cual una clase permite heredar las características (atributos y métodos) de otra clase",
                "p2":"Permite que se puedan definir nuevas clases basadas de unas ya existentes a fin de reutilizar el código"  
            }
        }
    }
}