{
    "bienvenida": [
        "Soy tu Asistente Virtual. Fui creada para instruirte todo respecto al hermoso mundo de la programacion."
    ],
    "definicion": [
        "La programacion es el proceso de crear un conjunto detallado de instrucciones y algoritmos que guian a una computadora para realizar acciones especificas y solucionar problemas. Es decir, le indicamos a la maquina como ejecutar pasos en un orden determinado para lograr un objetivo."
    ],
    "importancia": [
        "En la era digital actual, aprender las bases de la programacion es absolutamente esencial por varias razones importantes:"
    ],
    "razones": [
        "Nos permite automatizar tareas manuales repetitivas y propensas a errores humanos, optimizando tiempo y recursos.",
        "Nos capacita para resolver problemas complejos de todo tipo, desde calcular trayectorias de cohetes hasta predecir el clima.",
        "Nos habilita a desarrollar aplicaciones web y moviles innovadoras que mejoren la vida de millones de personas.",
        "Nos da el poder de crear videojuegos, animaciones, efectos visuales y experiencias interactivas gracias a la programacion grafica.",
        "Nos ayuda a proteger informacion confidencial y mejorar la seguridad informatica en general.",
        "Nos permite recolectar y analizar grandes volumenes de datos para obtener ideas valiosas y predecir tendencias.",
        "En resumen, dominar conceptos de programacion en la era digital es tan importante como saber leer y escribir."
    ],
    "variables": "Las variables son contenedores que almacenan datos que pueden modificarse durante la ejecucion de un programa. Se definen con un nombre descriptivo y un tipo de datos asociado como texto, numero, booleano, etc. Sirven para guardar valores que se utilizaran en distintas partes del codigo.",
    "constantes": "Las constantes tambien almacenan valores, pero que mantienen un valor fijo que no cambia. Se suelen definir con nombres en mayusculas por convencion. Algunos ejemplos son PI=3.14 o GRUPO_EDAD=20-35. Sirven para representar valores fijos que no variaran.",
    "tipos_de_datos": "Los tipos de datos definen el tipo de valor que puede almacenar una variable o constante. Los tipos primarios mas comunes en todos los lenguajes son: Numeros enteros y decimales para operaciones matematicas, Cadenas de texto para alfanumericos, Booleanos para verdadero/falso, Arrays y objetos para estructuras complejas.",
    "operadores": "Los operadores permiten realizar acciones sobre variables y valores, como asignacion (=), matematicos (+, -, *, /), comparacion (>, <, ==), logicos (and, or, not) entre muchos otros. Permiten construir expresiones complejas.",
    "estructuras_condicionales": "Las estructuras condicionales permiten bifurcacion en el programa dependiendo de si una expresion logica es cierta o falsa. Los principales son el if y else para ejecutar codigo si se cumple o no una condicion. Tambien switch (comparacion) y try/catch para manejo de errores.",
    "bucles": "Los bucles permiten ejecutar repetidamente un bloque de codigo mientras se cumpla una condicion. Los principales son for, mientras se cumpla un contador, y while, mientras se cumpla una expresion logica. Se utilizan para iteraciones, leer arrays, lectura de archivos, iteraciones infinitas y mas.",
    "funciones": "Bloques de codigo identificados con un nombre que se pueden reutilizar facilmente.",
    "compiladores": "traducen lenguajes al codigo maquina entendible por los computadores.",
    "depuracion": "tecnicas para identificar errores, bugs y fallos logicos en el codigo.",
    "algoritmos": "automatizan y resuelven problemas complejos de manera generica y escalable.",
    "estructuras_de_datos": {
        "definicion": "Las estructuras de datos son formas especificas de organizar y almacenar datos en la memoria de un programa para acceder y modificar los elementos de manera eficiente.",
        "arrays": {
            "descripcion": "Los arreglos o arrays son estructuras indexadas que permiten acceder a sus elementos mediante indices numericos, comenzando generalmente desde cero. Permiten almacenar y recorrer colecciones de elementos del mismo tipo.",
            "ventajas": "Acceso rapido a elementos especificos. Uso sencillo. Contiguedad en memoria. Muchas funciones integradas.",
            "desventajas": "Tamaño fijo en algunos lenguajes. Costoso redimensionar. Ineficiente para inserciones/eliminaciones."
        },
        "listas_enlazadas": {
            "descripcion": "Las listas vinculadas almacenan secuencias de elementos no contiguos en memoria. Cada elemento tiene un puntero al siguiente, formando una cadena de nodos.",
            "ventajas": "Tamaño dinamico. Facil de expandir. Insercion y eliminacion eficiente al principio.",
            "desventajas": "Acceso secuencial. Mayor uso de memoria por los punteros. Recorrer todos los elementos es lento."
        },
        "pilas": {
            "descripcion": "Estructura LIFO que permite almacenar y acceder a elementos de forma ordenada, el último que entra sale primero como una pila de platos.",
            "ventajas": [
                "Implementación sencilla",
                "Rápido acceso al último elemento insertado", 
                "Útil para deshacer/rehacer cambios"
            ],
            "desventajas": [
               "Solo se puede acceder al último elemento insertado",
               "No es posible acceder a elementos arbitrarios o al principio de la pila"  
            ]
        },
      
        "colas": {
           "descripcion": "Estructura FIFO que permite almacenar y acceder a elementos de forma ordenada, el primero que entra sale primero como una cola de personas.",
           "ventajas": [
              "Sigue un orden estricto de llegada",
              "Permite modelar situaciones reales como colas de impresión, tareas", 
              "Fácil de implementar"
           ],
           "desventajas": [
              "No se puede acceder a elementos arbitriarios sino hasta el principio de la cola",
              "Requiere más memoria al tener que mantener referencia al principio y final"
           ]
        },  
        "hash": {
            "descripcion": "Estructura clave-valor que permite almacenar y acceder a pares mediante una funcion hash sobre la clave para calcular indices.",
            "ventajas": "Rendimiento en busqueda, insercion y eliminacion constantes.",
            "desventajas": "Colisiones entre claves mapeadas al mismo indice. Mas uso de memoria."
        }
    },
    "POO": {
        "definicion": "Forma de programar basada en objetos que imitan cosas del mundo real con caracteristicas y comportamientos. La POO se asemeja a cómo organizamos y pensamos en el mundo real, donde las entidades (objetos) tienen características (atributos) y pueden realizar acciones (métodos).",
        "clases": {
            "definicion": "Modelos o moldes para crear objetos.",
            "ejemplo": "Imagina que \"Coche\" es un modelo o plantilla que define las características y comportamientos comunes a todos los autos, como el número de ruedas, el color, la marca, etc"
        },
        "objetos": {
            "definicion": "Casos específicos de las clases con atributos y acciones propias.",
            "ejemplo": "Cuando creas un objeto \"miAuto\" basado en la clase \"Coche\", estás creando un caso específico de un automóvil con sus propios detalles como el color rojo, marca Toyota, etc."
        },
        "herencia": {
            "definicion": "Capacidad de una clase para heredar características de otra.",
            "ejemplo": "La clase \"Minivan\" puede heredar las características generales de la clase \"Coche\", como el número de ruedas, pero también puede tener características específicas adicionales, como el tipo de carrocería."
        },
        "polimorfismo": {
            "definicion": "Capacidad de un objeto para comportarse de varias maneras.",
            "ejemplo": "La función \"acelerar\" puede aceptar tanto un objeto de la clase \"Coche\" como de la clase \"Minivan\", permitiendo que un mismo método funcione con diferentes tipos de objetos relacionados."
        },
        "encapsulamiento": {
            "definicion": "Esconder detalles internos de una clase y mostrar solo lo necesario.",
            "ejemplo": "Al definir una variable \"claveAcceso\" como privada en una clase, estás ocultando los detalles internos y exponiendo solo la interfaz necesaria para acceder o modificar esa informacion."
        }
        
    },

    "PE PREGUNTA 1": [
        "¿Cual es el objetivo principal del pensamiento computacional?",
        "a) Resolver problemas utilizando algoritmos y abstraccion.",
        "b) Programar robots y sistemas autonomos.",
        "c) Disenar hardware de computadoras."
    ],

    "PE PREGUNTA 2": [
        "El primer paso del pensamiento computacional es identificar el problema.",
        "a) Verdadero",
        "b) Falso"
    ],

    "PE PREGUNTA 3": [
        "¿Que es un algoritmo en terminos de pensamiento computacional?",
        "a) Un patron de diseno visual",
        "b) Un lenguaje de programacion",
        "c) Una secuencia de pasos para resolver un problema",
        "d) Una representacion grafica de datos"
    ],

    "PE PREGUNTA 4": [
        "¿Para que sirven las variables en programacion?",
        "a) Para almacenar datos que no cambian",
        "b) Para realizar operaciones matematicas",
        "c) Para almacenar datos que pueden modificarse durante la ejecucion de un programa"
    ],

    "PE PREGUNTA 5": [
        "¿Cual es la diferencia entre variables y constantes?",
        "a) Ninguna, son lo mismo",
        "b) Las variables mantienen un valor fijo",
        "c) Las constantes mantienen un valor fijo que no cambia"
    ],

    "PE PREGUNTA 6": [
        "Menciona dos ejemplos de estructuras de datos",
        "a) Colas y pilas",
        "b) Arreglos y listas enlazadas",
        "c) Arreglos y arboles",
        "d) Matrices y grafos"
    ],

    "PE PREGUNTA 7": [
        "¿Que es la programacion orientada a objetos?",
        "a) Paradigma de programacion basado en modulos funcionales",
        "b) Paradigma de programacion basado en algoritmos",
        "c) Paradigma de programacion basado en objetos que emulan entidades reales con propiedades y metodos"
    ],

    "PE PREGUNTA 8": [
        "Explica un uso tipico de una pila como estructura de datos",
        "a) Administracion de memoria dinamica",
        "b) Rehacer/deshacer en editores de texto",
        "c) Almacenamiento temporal de datos",
        "d) Comunicacion entre programas"
    ],

    "PE PREGUNTA 9": [
        "¿Para que sirven las estructuras condicionales en programacion?",
        "a) Para generar numeros aleatorios",
        "b) Para bifurcar el flujo del programa dependiendo de si una condicion es cierta o falsa",
        "c) Para almacenar datos temporalmente",
        "d) Para facilitar operaciones matematicas"
    ],

    "PE PREGUNTA 10": [
        "Menciona un caso de uso tipico para una cola como estructura de datos",
        "a) Evaluador de expresiones matematicas",
        "b) Autocompletado de palabras en un editor",
        "c) Gestion de procesos e hilos en un sistema operativo",
        "d) Animaciones en videojuegos"
    ]
}
